// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/panupakm/miniredis/server/internal/handler (interfaces: Handler)

// Package mock_handler is a generated GoMock package.
package handler

import (
	net "net"
	reflect "reflect"

	"github.com/panupakm/miniredis/server/context"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleGet mocks base method.
func (m *MockHandler) HandleGet(arg0 net.Conn, arg1 *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGet indicates an expected call of HandleGet.
func (mr *MockHandlerMockRecorder) HandleGet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGet", reflect.TypeOf((*MockHandler)(nil).HandleGet), arg0, arg1)
}

// HandlePing mocks base method.
func (m *MockHandler) HandlePing(arg0 net.Conn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePing indicates an expected call of HandlePing.
func (mr *MockHandlerMockRecorder) HandlePing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePing", reflect.TypeOf((*MockHandler)(nil).HandlePing), arg0)
}

// HandlePub mocks base method.
func (m *MockHandler) HandlePub(arg0 net.Conn, arg1 *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePub", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePub indicates an expected call of HandlePub.
func (mr *MockHandlerMockRecorder) HandlePub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePub", reflect.TypeOf((*MockHandler)(nil).HandlePub), arg0, arg1)
}

// HandleSet mocks base method.
func (m *MockHandler) HandleSet(arg0 net.Conn, arg1 *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSet", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSet indicates an expected call of HandleSet.
func (mr *MockHandlerMockRecorder) HandleSet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSet", reflect.TypeOf((*MockHandler)(nil).HandleSet), arg0, arg1)
}

// HandleSub mocks base method.
func (m *MockHandler) HandleSub(arg0 net.Conn, arg1 *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSub", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSub indicates an expected call of HandleSub.
func (mr *MockHandlerMockRecorder) HandleSub(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSub", reflect.TypeOf((*MockHandler)(nil).HandleSub), arg0, arg1)
}
