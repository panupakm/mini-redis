// Code generated by MockGen. DO NOT EDIT.
// Source: ./server/internal/handler/handler.go

// Package mock_handler is a generated GoMock package.
package handler

import (
	io "io"
	reflect "reflect"

	context "github.com/panupakm/miniredis/server/context"
	gomock "go.uber.org/mock/gomock"
)

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// HandleGet mocks base method.
func (m *MockHandler) HandleGet(rw io.ReadWriter, ctx *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleGet", rw, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleGet indicates an expected call of HandleGet.
func (mr *MockHandlerMockRecorder) HandleGet(rw, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleGet", reflect.TypeOf((*MockHandler)(nil).HandleGet), rw, ctx)
}

// HandlePing mocks base method.
func (m *MockHandler) HandlePing(rw io.ReadWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePing", rw)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePing indicates an expected call of HandlePing.
func (mr *MockHandlerMockRecorder) HandlePing(rw interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePing", reflect.TypeOf((*MockHandler)(nil).HandlePing), rw)
}

// HandlePub mocks base method.
func (m *MockHandler) HandlePub(rw io.ReadWriter, ctx *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandlePub", rw, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandlePub indicates an expected call of HandlePub.
func (mr *MockHandlerMockRecorder) HandlePub(rw, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePub", reflect.TypeOf((*MockHandler)(nil).HandlePub), rw, ctx)
}

// HandleSet mocks base method.
func (m *MockHandler) HandleSet(rw io.ReadWriter, ctx *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSet", rw, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSet indicates an expected call of HandleSet.
func (mr *MockHandlerMockRecorder) HandleSet(rw, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSet", reflect.TypeOf((*MockHandler)(nil).HandleSet), rw, ctx)
}

// HandleSub mocks base method.
func (m *MockHandler) HandleSub(rw io.ReadWriter, ctx *context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleSub", rw, ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleSub indicates an expected call of HandleSub.
func (mr *MockHandlerMockRecorder) HandleSub(rw, ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleSub", reflect.TypeOf((*MockHandler)(nil).HandleSub), rw, ctx)
}
